sentimentsData <- mutate(sentimentsData, year = year(date), month = month(date), day = day(date), yday = yday(date), dateClean = ymd(date))
# sort by date
sentimentsData <- sentimentsData[order(sentimentsData$date),]
startDate <- sentimentsData$date[1]
endDate <- sentimentsData$date[length(sentimentsData$date)]
startDate
endDate
sentimentsData$messages <- sentimentsData$V2
sentimentsData <- sentimentsData[,c(-1,-2,-8)]
sentimentsData$time <- format(sentimentsData$date, "%H:%M")
sentimentsData$date <- format(sentimentsData$date, "%Y-%m-%d")
# sentimentsData$date
# str(sentimentsData)
# View(sentimentsData)
# run sentiment analysis
sentimentsData$sentimentScore <- analyzeSentiment(sentimentsData$messages)
# sentiment <- analyzeSentiment(string)
# sentiment$SentimentGI
TS <- cbind(sentimentsData$date, sentimentsData$sentimentScore$SentimentGI)
# sentimentsData$date
# sentimentsData$sentimentScore$SentimentGI
# View(TS)
# # Missing dates
# all_days <- seq(ymd("2007/10/05"), ymd("2008/08/04"),  by = "day")
# str(all_days)
# str(sentimentsData$date)
# str(as.Date(sentimentsData$date))
# length(all_days)
# length(unique(sentimentsData$date))
# missingDates <- all_days[!(all_days %in% as.Date(sentimentsData$date))]
# missingDates
# str(missingDates)
# missingDates <- as.character.Date(missingDates)
# missingDates <- cbind(missingDates, rep(NA, length(missingDates)), rep(NA, length(missingDates)), rep(NA, length(missingDates)), rep(NA, length(missingDates)), rep(NA, length(missingDates)), rep(NA, length(missingDates)))
# missingDates
# colnames(sentimentsData)
# colnames(missingDates) <- colnames(sentimentsData)
# colnames(missingDates)
# ncol(missingDates)
# ncol(sentimentsData)
# dataWithMissingDates <- rbind(sentimentsData, missingDates)
# View(dataWithMissingDates)
# sentimentsData <- dataWithMissingDates[order(dataWithMissingDates$date),]
# View(sentimentsData)
# Missing dates
# # 1
# all_days <- seq(ymd("2007/10/05"), ymd("2008/08/04"),  by = "day")
startDate <- sentimentsData$date[1]
endDate <- sentimentsData$date[length(sentimentsData$date)]
startDate
endDate
ymd(startDate)
ymd(endDate)
all_days <- seq(ymd(startDate), ymd(endDate),  by = "day")
# str(all_days)
# str(TS)
# as.Date(TS[,1])
missingDates <- all_days[!(all_days %in% as.Date(TS[,1]))]
# missingDates
# str(missingDates)
missingDates <- as.character.Date(missingDates)
missingDates <- cbind(missingDates, rep(0, length(missingDates)))
# missingDates
# ncol(missingDates)
# ncol(TS)
dataWithMissingDates <- rbind(TS, missingDates)
# View(dataWithMissingDates)
TSwithMissingDates <- dataWithMissingDates[order(dataWithMissingDates[,1]),]
# View(TSwithMissingDates)
colnames(TSwithMissingDates) <- c("date", "score")
# View(TSwithMissingDates)
TSwithMissingDates <- as.data.frame(TSwithMissingDates)
# str(TSwithMissingDates)
TSwithMissingDates$score <- as.numeric(TSwithMissingDates$score)
TSwithMissingDates$date <- as.Date.factor(TSwithMissingDates$date)
# str(TSwithMissingDates)
# attach(TSwithMissingDates)
# TSwithMissingDates %>% group_by(date)
# TSAggregatedDaily <- aggregate(TSwithMissingDates$date ~ TSwithMissingDates$score, TSwithMissingDates, FUN = "median")
# warnings()
TSAggregatedDaily <- aggregate(TSwithMissingDates, by = list(TSwithMissingDates$date), FUN = "mean")
# TSAggregatedDaily
# View(TSAggregatedDaily)
ts_daily <- as.ts(TSAggregatedDaily$score)
# length(TSAggregatedDaily$score)
# TSdailyTS <- ts(TSAggregatedDaily$score, frequency = length(TSAggregatedDaily$score), start = c(2007, 10))
ts_daily_freq_30 <- ts(TSAggregatedDaily$score, frequency = 30)
ts_daily_freq_7 <- ts(TSAggregatedDaily$score, frequency = 7)
# library(forecast)
# ts_daily_msts <- msts(TSAggregatedDaily$score, seasonal.periods = c(7,365))
# data_ts <- ts_daily
data_ts <- ts_daily_freq_30 # frequency 30 shows better decomposition resultt trend noise than 7
# data_ts <- ts_daily_freq_7
# data_ts <- ts_daily_msts
str(data_ts)
# plot(data_ts)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
acf(diff(ts_daily)) # ts_daily, without frequency shows better ACF with tick marks 0,1,...
attributes(data_ts)
# dcomp <- decompose(data_ts, type = "additive")
# plot(dcomp)
# dcomp <- decompose(data_ts, type = "multiplicative")
# plot(dcomp)
dcomp <- decompose(data_ts, type = c("additive", "multiplicative"))
# dcomp <- decompose(ts_daily, type = c("additive", "multiplicative"))
plot(dcomp)
# ?decompose
# setEPS()
# postscript(paste("sentiments_time_series_", whichProject, ".eps", sep = ""))
# # par(mfrow = c(2, 2)) # plot three waves in one row
# # par(mfrow = c(1, 1))
# plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
# dev.off()
# setEPS()
# postscript(paste("sentiments_time_series_Decomposed_Trend_Seasonality_Noise_", whichProject, ".eps", sep = ""))
# # par(mfrow = c(2, 2)) # plot three waves in one row
# # par(mfrow = c(1, 1))
# plot(dcomp)
# dev.off()
####### OUTLIERS
# Five types of outliers can be considered. By default:
# "AO" additive outliers
# "LS" level shifts, and
# "TC" temporary changes
# "IO" innovative outliers
# "SLS" seasonal level shifts
# tso_output <- tso(ts_daily, cval = 3, types = c("AO", "LS", "TC", "IO"), tsmethod = "arima", args.tsmethod = list(order = c(1, 0, 1)))
# tso_output <- tso(ts_daily, cval = 3, types = c("AO", "LS", "TC", "IO", "SLS"), tsmethod = c("auto.arima", "arima", "stsm"), args.tsmethod = NULL)
# tso_output <- tso(ts_daily, cval = 4, types = c("AO", "LS", "TC", "IO", "SLS"), tsmethod = c("auto.arima", "arima", "stsm"), args.tsmethod = NULL)
tso_output <- tso(ts_daily, types = c("AO", "LS", "TC", "IO", "SLS"), tsmethod = c("auto.arima", "arima", "stsm"), args.tsmethod = NULL)
tso_output
plot(tso_output)
# setEPS()
# postscript(paste("sentiments_time_series_with_Outliers_", whichProject, ".eps", sep = ""))
# # par(mfrow = c(2, 2)) # plot three waves in one row
# par(mfrow = c(1, 1))
# plot(tso_output)
# dev.off()
# TSI <- data_ts
# with_outliers <- arima(TSI, order = c(1, 1, 0))
# tso_output <- tso(data_ts, cval = NULL, delta = 0.7, types = c("AO", "LS", "TC"), maxit = 1, maxit.iloop = 4, tsmethod = c("auto.arima", "arima", "stsm"), args.tsmethod = NULL)
getwd()
setwd("/Users/azarbaam/Desktop/OUTPUTS/")
save.image(file = paste("TimeSeries_DataVariables_project_", whichProject, sep = ""))
# you may load them later with load("~/Desktop/OUTPUTS/TimeSeries_DataVariables_project_X")
getwd()
setwd("/Users/azarbaam/Desktop/Thesis_data/sentiments/sentimentsDataCleaned/")
getwd()
sentimentsData <- read.csv("/Users/azarbaam/Desktop/Thesis_data/sentiments/sentimentsDataCleaned/11.csv", header = FALSE, stringsAsFactors = FALSE)
whichProject <- 11
getwd()
# head(sentimentsData)
sentimentsData$date <- strptime(sentimentsData$V1, "%Y-%m-%d %H:%M:%S")
sentimentsData$date <- as.POSIXct(sentimentsData$date)
# sentimentsData$date
sentimentsData <- mutate(sentimentsData, year = year(date), month = month(date), day = day(date), yday = yday(date), dateClean = ymd(date))
# sort by date
sentimentsData <- sentimentsData[order(sentimentsData$date),]
startDate <- sentimentsData$date[1]
endDate <- sentimentsData$date[length(sentimentsData$date)]
startDate
endDate
sentimentsData$messages <- sentimentsData$V2
sentimentsData <- sentimentsData[,c(-1,-2,-8)]
sentimentsData$time <- format(sentimentsData$date, "%H:%M")
sentimentsData$date <- format(sentimentsData$date, "%Y-%m-%d")
# sentimentsData$date
# str(sentimentsData)
# View(sentimentsData)
# run sentiment analysis
sentimentsData$sentimentScore <- analyzeSentiment(sentimentsData$messages)
# sentiment <- analyzeSentiment(string)
# sentiment$SentimentGI
TS <- cbind(sentimentsData$date, sentimentsData$sentimentScore$SentimentGI)
# sentimentsData$date
# sentimentsData$sentimentScore$SentimentGI
# View(TS)
# # Missing dates
# all_days <- seq(ymd("2007/10/05"), ymd("2008/08/04"),  by = "day")
# str(all_days)
# str(sentimentsData$date)
# str(as.Date(sentimentsData$date))
# length(all_days)
# length(unique(sentimentsData$date))
# missingDates <- all_days[!(all_days %in% as.Date(sentimentsData$date))]
# missingDates
# str(missingDates)
# missingDates <- as.character.Date(missingDates)
# missingDates <- cbind(missingDates, rep(NA, length(missingDates)), rep(NA, length(missingDates)), rep(NA, length(missingDates)), rep(NA, length(missingDates)), rep(NA, length(missingDates)), rep(NA, length(missingDates)))
# missingDates
# colnames(sentimentsData)
# colnames(missingDates) <- colnames(sentimentsData)
# colnames(missingDates)
# ncol(missingDates)
# ncol(sentimentsData)
# dataWithMissingDates <- rbind(sentimentsData, missingDates)
# View(dataWithMissingDates)
# sentimentsData <- dataWithMissingDates[order(dataWithMissingDates$date),]
# View(sentimentsData)
# Missing dates
# # 1
# all_days <- seq(ymd("2007/10/05"), ymd("2008/08/04"),  by = "day")
startDate <- sentimentsData$date[1]
endDate <- sentimentsData$date[length(sentimentsData$date)]
startDate
endDate
ymd(startDate)
ymd(endDate)
all_days <- seq(ymd(startDate), ymd(endDate),  by = "day")
# str(all_days)
# str(TS)
# as.Date(TS[,1])
missingDates <- all_days[!(all_days %in% as.Date(TS[,1]))]
# missingDates
# str(missingDates)
missingDates <- as.character.Date(missingDates)
missingDates <- cbind(missingDates, rep(0, length(missingDates)))
# missingDates
# ncol(missingDates)
# ncol(TS)
dataWithMissingDates <- rbind(TS, missingDates)
# View(dataWithMissingDates)
TSwithMissingDates <- dataWithMissingDates[order(dataWithMissingDates[,1]),]
# View(TSwithMissingDates)
colnames(TSwithMissingDates) <- c("date", "score")
# View(TSwithMissingDates)
TSwithMissingDates <- as.data.frame(TSwithMissingDates)
# str(TSwithMissingDates)
TSwithMissingDates$score <- as.numeric(TSwithMissingDates$score)
TSwithMissingDates$date <- as.Date.factor(TSwithMissingDates$date)
# str(TSwithMissingDates)
# attach(TSwithMissingDates)
# TSwithMissingDates %>% group_by(date)
# TSAggregatedDaily <- aggregate(TSwithMissingDates$date ~ TSwithMissingDates$score, TSwithMissingDates, FUN = "median")
# warnings()
TSAggregatedDaily <- aggregate(TSwithMissingDates, by = list(TSwithMissingDates$date), FUN = "mean")
# TSAggregatedDaily
# View(TSAggregatedDaily)
ts_daily <- as.ts(TSAggregatedDaily$score)
# length(TSAggregatedDaily$score)
# TSdailyTS <- ts(TSAggregatedDaily$score, frequency = length(TSAggregatedDaily$score), start = c(2007, 10))
ts_daily_freq_30 <- ts(TSAggregatedDaily$score, frequency = 30)
ts_daily_freq_7 <- ts(TSAggregatedDaily$score, frequency = 7)
# library(forecast)
# ts_daily_msts <- msts(TSAggregatedDaily$score, seasonal.periods = c(7,365))
# data_ts <- ts_daily
data_ts <- ts_daily_freq_30 # frequency 30 shows better decomposition resultt trend noise than 7
# data_ts <- ts_daily_freq_7
# data_ts <- ts_daily_msts
str(data_ts)
# plot(data_ts)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
acf(diff(ts_daily)) # ts_daily, without frequency shows better ACF with tick marks 0,1,...
attributes(data_ts)
# dcomp <- decompose(data_ts, type = "additive")
# plot(dcomp)
# dcomp <- decompose(data_ts, type = "multiplicative")
# plot(dcomp)
dcomp <- decompose(data_ts, type = c("additive", "multiplicative"))
# dcomp <- decompose(ts_daily, type = c("additive", "multiplicative"))
plot(dcomp)
# ?decompose
# setEPS()
# postscript(paste("sentiments_time_series_", whichProject, ".eps", sep = ""))
# # par(mfrow = c(2, 2)) # plot three waves in one row
# # par(mfrow = c(1, 1))
# plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
# dev.off()
# setEPS()
# postscript(paste("sentiments_time_series_Decomposed_Trend_Seasonality_Noise_", whichProject, ".eps", sep = ""))
# # par(mfrow = c(2, 2)) # plot three waves in one row
# # par(mfrow = c(1, 1))
# plot(dcomp)
# dev.off()
####### OUTLIERS
# Five types of outliers can be considered. By default:
# "AO" additive outliers
# "LS" level shifts, and
# "TC" temporary changes
# "IO" innovative outliers
# "SLS" seasonal level shifts
tso_output <- tso(ts_daily, types = c("AO", "LS", "TC", "IO", "SLS"), tsmethod = c("auto.arima", "arima", "stsm"), args.tsmethod = NULL)
tso_output
plot(tso_output)
# setEPS()
# postscript(paste("sentiments_time_series_with_Outliers_", whichProject, ".eps", sep = ""))
# # par(mfrow = c(2, 2)) # plot three waves in one row
# par(mfrow = c(1, 1))
# plot(tso_output)
# dev.off()
# TSI <- data_ts
# with_outliers <- arima(TSI, order = c(1, 1, 0))
# tso_output <- tso(data_ts, cval = NULL, delta = 0.7, types = c("AO", "LS", "TC"), maxit = 1, maxit.iloop = 4, tsmethod = c("auto.arima", "arima", "stsm"), args.tsmethod = NULL)
getwd()
setwd("/Users/azarbaam/Desktop/OUTPUTS/")
save.image(file = paste("TimeSeries_DataVariables_project_", whichProject, sep = ""))
# you may load them later with load("~/Desktop/OUTPUTS/TimeSeries_DataVariables_project_X")
getwd()
setwd("/Users/azarbaam/Desktop/Thesis_data/sentiments/sentimentsDataCleaned/")
getwd()
sentimentsData <- read.csv("/Users/azarbaam/Desktop/Thesis_data/sentiments/sentimentsDataCleaned/12.csv", header = FALSE, stringsAsFactors = FALSE)
whichProject <- 12
getwd()
# head(sentimentsData)
sentimentsData$date <- strptime(sentimentsData$V1, "%Y-%m-%d %H:%M:%S")
sentimentsData$date <- as.POSIXct(sentimentsData$date)
# sentimentsData$date
sentimentsData <- mutate(sentimentsData, year = year(date), month = month(date), day = day(date), yday = yday(date), dateClean = ymd(date))
# sort by date
sentimentsData <- sentimentsData[order(sentimentsData$date),]
startDate <- sentimentsData$date[1]
endDate <- sentimentsData$date[length(sentimentsData$date)]
startDate
endDate
sentimentsData$messages <- sentimentsData$V2
sentimentsData <- sentimentsData[,c(-1,-2,-8)]
sentimentsData$time <- format(sentimentsData$date, "%H:%M")
sentimentsData$date <- format(sentimentsData$date, "%Y-%m-%d")
# sentimentsData$date
# str(sentimentsData)
# View(sentimentsData)
# run sentiment analysis
sentimentsData$sentimentScore <- analyzeSentiment(sentimentsData$messages)
# sentiment <- analyzeSentiment(string)
# sentiment$SentimentGI
TS <- cbind(sentimentsData$date, sentimentsData$sentimentScore$SentimentGI)
# sentimentsData$date
# sentimentsData$sentimentScore$SentimentGI
# View(TS)
# # Missing dates
# all_days <- seq(ymd("2007/10/05"), ymd("2008/08/04"),  by = "day")
# str(all_days)
# str(sentimentsData$date)
# str(as.Date(sentimentsData$date))
# length(all_days)
# length(unique(sentimentsData$date))
# missingDates <- all_days[!(all_days %in% as.Date(sentimentsData$date))]
# missingDates
# str(missingDates)
# missingDates <- as.character.Date(missingDates)
# missingDates <- cbind(missingDates, rep(NA, length(missingDates)), rep(NA, length(missingDates)), rep(NA, length(missingDates)), rep(NA, length(missingDates)), rep(NA, length(missingDates)), rep(NA, length(missingDates)))
# missingDates
# colnames(sentimentsData)
# colnames(missingDates) <- colnames(sentimentsData)
# colnames(missingDates)
# ncol(missingDates)
# ncol(sentimentsData)
# dataWithMissingDates <- rbind(sentimentsData, missingDates)
# View(dataWithMissingDates)
# sentimentsData <- dataWithMissingDates[order(dataWithMissingDates$date),]
# View(sentimentsData)
# Missing dates
# # 1
# all_days <- seq(ymd("2007/10/05"), ymd("2008/08/04"),  by = "day")
startDate <- sentimentsData$date[1]
endDate <- sentimentsData$date[length(sentimentsData$date)]
startDate
endDate
ymd(startDate)
ymd(endDate)
all_days <- seq(ymd(startDate), ymd(endDate),  by = "day")
# str(all_days)
# str(TS)
# as.Date(TS[,1])
missingDates <- all_days[!(all_days %in% as.Date(TS[,1]))]
# missingDates
# str(missingDates)
missingDates <- as.character.Date(missingDates)
missingDates <- cbind(missingDates, rep(0, length(missingDates)))
# missingDates
# ncol(missingDates)
# ncol(TS)
dataWithMissingDates <- rbind(TS, missingDates)
# View(dataWithMissingDates)
TSwithMissingDates <- dataWithMissingDates[order(dataWithMissingDates[,1]),]
# View(TSwithMissingDates)
colnames(TSwithMissingDates) <- c("date", "score")
# View(TSwithMissingDates)
TSwithMissingDates <- as.data.frame(TSwithMissingDates)
# str(TSwithMissingDates)
TSwithMissingDates$score <- as.numeric(TSwithMissingDates$score)
TSwithMissingDates$date <- as.Date.factor(TSwithMissingDates$date)
# str(TSwithMissingDates)
# attach(TSwithMissingDates)
# TSwithMissingDates %>% group_by(date)
# TSAggregatedDaily <- aggregate(TSwithMissingDates$date ~ TSwithMissingDates$score, TSwithMissingDates, FUN = "median")
# warnings()
TSAggregatedDaily <- aggregate(TSwithMissingDates, by = list(TSwithMissingDates$date), FUN = "mean")
# TSAggregatedDaily
# View(TSAggregatedDaily)
ts_daily <- as.ts(TSAggregatedDaily$score)
# length(TSAggregatedDaily$score)
# TSdailyTS <- ts(TSAggregatedDaily$score, frequency = length(TSAggregatedDaily$score), start = c(2007, 10))
ts_daily_freq_30 <- ts(TSAggregatedDaily$score, frequency = 30)
ts_daily_freq_7 <- ts(TSAggregatedDaily$score, frequency = 7)
# library(forecast)
# ts_daily_msts <- msts(TSAggregatedDaily$score, seasonal.periods = c(7,365))
# data_ts <- ts_daily
data_ts <- ts_daily_freq_30 # frequency 30 shows better decomposition resultt trend noise than 7
# data_ts <- ts_daily_freq_7
# data_ts <- ts_daily_msts
str(data_ts)
# plot(data_ts)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
acf(diff(ts_daily)) # ts_daily, without frequency shows better ACF with tick marks 0,1,...
attributes(data_ts)
# dcomp <- decompose(data_ts, type = "additive")
# plot(dcomp)
# dcomp <- decompose(data_ts, type = "multiplicative")
# plot(dcomp)
dcomp <- decompose(data_ts, type = c("additive", "multiplicative"))
# dcomp <- decompose(ts_daily, type = c("additive", "multiplicative"))
plot(dcomp)
# ?decompose
# setEPS()
# postscript(paste("sentiments_time_series_", whichProject, ".eps", sep = ""))
# # par(mfrow = c(2, 2)) # plot three waves in one row
# # par(mfrow = c(1, 1))
# plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
# dev.off()
# setEPS()
# postscript(paste("sentiments_time_series_Decomposed_Trend_Seasonality_Noise_", whichProject, ".eps", sep = ""))
# # par(mfrow = c(2, 2)) # plot three waves in one row
# # par(mfrow = c(1, 1))
# plot(dcomp)
# dev.off()
####### OUTLIERS
# Five types of outliers can be considered. By default:
# "AO" additive outliers
# "LS" level shifts, and
# "TC" temporary changes
# "IO" innovative outliers
# "SLS" seasonal level shifts
# tso_output <- tso(ts_daily, cval = 3, types = c("AO", "LS", "TC", "IO"), tsmethod = "arima", args.tsmethod = list(order = c(1, 0, 1)))
# tso_output <- tso(ts_daily, cval = 3, types = c("AO", "LS", "TC", "IO", "SLS"), tsmethod = c("auto.arima", "arima", "stsm"), args.tsmethod = NULL)
# tso_output <- tso(ts_daily, cval = 4, types = c("AO", "LS", "TC", "IO", "SLS"), tsmethod = c("auto.arima", "arima", "stsm"), args.tsmethod = NULL)
# tso_output <- tso(ts_daily, types = c("AO", "LS", "TC", "IO", "SLS"), tsmethod = c("auto.arima", "arima", "stsm"), args.tsmethod = NULL, maxit = 5, maxit.iloop = 100)
tso_output <- tso(ts_daily, types = c("AO", "LS", "TC", "IO", "SLS"), tsmethod = c("auto.arima", "arima", "stsm"), args.tsmethod = NULL)
# ?tso
tso_output
# tso_output$outliers
plot(tso_output)
# setEPS()
# postscript(paste("sentiments_time_series_with_Outliers_", whichProject, ".eps", sep = ""))
# # par(mfrow = c(2, 2)) # plot three waves in one row
# par(mfrow = c(1, 1))
# plot(tso_output)
# dev.off()
# TSI <- data_ts
# with_outliers <- arima(TSI, order = c(1, 1, 0))
# tso_output <- tso(data_ts, cval = NULL, delta = 0.7, types = c("AO", "LS", "TC"), maxit = 1, maxit.iloop = 4, tsmethod = c("auto.arima", "arima", "stsm"), args.tsmethod = NULL)
getwd()
setwd("/Users/azarbaam/Desktop/OUTPUTS/")
save.image(file = paste("TimeSeries_DataVariables_project_", whichProject, sep = ""))
# you may load them later with load("~/Desktop/OUTPUTS/TimeSeries_DataVariables_project_X")
getwd()
setwd("/Users/azarbaam/Desktop/Thesis_data/sentiments/sentimentsDataCleaned/")
getwd()
load("~/Desktop/OUTPUTS/TIME_SERIES_DATA/TimeSeries_DataVariables_project_1")
plot(dcomp)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
plot(tso_output)
plot(dcomp)
plot(dcomp)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
plot(tso_output)
setwd("/Users/azarbaam/Desktop/OUTPUTS/")
load("~/Desktop/OUTPUTS/TIME_SERIES_DATA/TimeSeries_DataVariables_project_2")
setwd("/Users/azarbaam/Desktop/OUTPUTS/TIME_SERIES_DATA/")
plot(dcomp)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
plot(tso_output)
load("~/Desktop/OUTPUTS/TIME_SERIES_DATA/TimeSeries_DataVariables_project_3")
plot(dcomp)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
plot(tso_output)
load("~/Desktop/OUTPUTS/TIME_SERIES_DATA/TimeSeries_DataVariables_project_4")
plot(dcomp)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
plot(tso_output)
load("~/Desktop/OUTPUTS/TIME_SERIES_DATA/TimeSeries_DataVariables_project_5")
plot(dcomp)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
plot(tso_output)
load("~/Desktop/OUTPUTS/TIME_SERIES_DATA/TimeSeries_DataVariables_project_6")
plot(dcomp)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
plot(tso_output)
load("~/Desktop/OUTPUTS/TIME_SERIES_DATA/TimeSeries_DataVariables_project_7")
plot(dcomp)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
plot(tso_output)
load("~/Desktop/OUTPUTS/TIME_SERIES_DATA/TimeSeries_DataVariables_project_8")
plot(dcomp)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
plot(tso_output)
load("~/Desktop/OUTPUTS/TIME_SERIES_DATA/TimeSeries_DataVariables_project_9")
plot(dcomp)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
plot(tso_output)
load("~/Desktop/OUTPUTS/TIME_SERIES_DATA/TimeSeries_DataVariables_project_10")
plot(dcomp)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
plot(tso_output)
load("~/Desktop/OUTPUTS/TIME_SERIES_DATA/TimeSeries_DataVariables_project_11")
plot(dcomp)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
plot(tso_output)
load("~/Desktop/OUTPUTS/TIME_SERIES_DATA/TimeSeries_DataVariables_project_12")
plot(dcomp)
plot(ts_daily, xlab = "Time: Run-up to Fork Days", ylab = "Sentiments Score", main = "Time Series of Sentiments")
plot(tso_output)
